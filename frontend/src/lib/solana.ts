// Solana program configuration
export const PROGRAM_ID = 'AqQHGMDSDezFmf348JaymgPpLSfzswef9EXd1Hw5PUoM';
export const ARCIUM_ID = 'BKck65TgoKRokMjQM3datB9oRwJ8rAj2jxPXvHXUvcL6';

// Instruction discriminators (generated by Anchor as first 8 bytes of sha256("global:instruction_name"))
export const DISCRIMINATORS = {
  create_opinion_post: [111, 239, 168, 253, 237, 77, 31, 183], // sha256("global:create_opinion_post")[:8]
  add_comment: [200, 75, 34, 95, 176, 189, 220, 97], // sha256("global:add_comment")[:8]
  init_opinion_stats: [142, 228, 58, 207, 238, 186, 105, 74], // sha256("global:init_opinion_stats")[:8]
  submit_opinion_response: [39, 50, 53, 15, 216, 77, 22, 218], // sha256("global:submit_opinion_response")[:8]
  reveal_opinion_stats: [8, 170, 170, 63, 216, 78, 38, 229] // sha256("global:reveal_opinion_stats")[:8]
};

// Encode a u64 as little-endian bytes (browser-safe, no writeBigUInt64LE)
export function u64LE(n: number | bigint): Buffer {
  let x = BigInt(n)
  const b = Buffer.alloc(8)
  for (let i = 0; i < 8; i++) {
    b[i] = Number(x & 0xffn)
    x >>= 8n
  }
  return b
}

// Client-side encryption utilities
export function encryptData(data: string, key: string = 'demo-key'): string {
  let encrypted = '';
  for (let i = 0; i < data.length; i++) {
    encrypted += String.fromCharCode(data.charCodeAt(i) ^ key.charCodeAt(i % key.length));
  }
  return Buffer.from(encrypted, 'binary').toString('hex');
}

export function decryptData(encryptedData: string, key: string = 'demo-key'): string {
  const data = Buffer.from(encryptedData, 'hex').toString('binary');
  let decrypted = '';
  for (let i = 0; i < data.length; i++) {
    decrypted += String.fromCharCode(data.charCodeAt(i) ^ key.charCodeAt(i % key.length));
  }
  return decrypted;
}

// PDA derivation helpers
export function createPostPDA(postId: number, programId: string) {
  const { PublicKey } = require('@solana/web3.js');
  const le = u64LE(postId)
  return PublicKey.findProgramAddressSync(
    [Buffer.from('opinion_post'), le],
    new PublicKey(programId)
  );
}

export function createCommentPDA(commentId: number, programId: string) {
  const { PublicKey } = require('@solana/web3.js');
  const le = u64LE(commentId)
  return PublicKey.findProgramAddressSync(
    [Buffer.from('comment'), le],
    new PublicKey(programId)
  );
}
